package cz.wz.kotrj7am.spectrum.test;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.imageio.ImageIO;

public class Main {
	
	public static final String SOURCE = "testImages/";
	public static final String DEST = "decoded/";

	public static void main(String[] args) {
		System.out.println("test");
		File file = new File(SOURCE);
		if(file.isDirectory()){
			for(File f : file.listFiles()){
				if(f.getName().startsWith("img")){
					decode(f);
				}
			}
		} else {
			System.out.println("Source is not directory!");
		}
	}
	
	public static final int width = 640;
	public static final int height = 480;
	
	private static void decode(File file){

		String name = file.getName();
		
		try {
			byte[] data = readSmallBinaryFile(file.getPath());
			int[] rgbints1 = new int[width * height];
			int[] rgbints2 = new int[width * height];
			
			decodeYUV(rgbints1, data, width, height);
			// second looks better!
			YUV_NV21_TO_RGB(rgbints2, data, width, height);
			
			BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			img.setRGB(0, 0, width, height, rgbints1, 0, width);
			

			BufferedImage img2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			img2.setRGB(0, 0, width, height, rgbints2, 0, width);
			
			
			ImageIO.write(img, "png", new File(DEST + name + "-1.png"));
			ImageIO.write(img2, "png", new File(DEST + name + "-2.png"));
			
			System.out.println("Image: " + name);
			
			modify(img, rgbints1, data);
			ImageIO.write(img, "png", new File(DEST + name + "-3.png"));
			
			modify(img2, rgbints2, data);
			ImageIO.write(img2, "png", new File(DEST + name + "-4.png"));
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static final int widthRect = 20;
	public static final int heightRect = 20;
	
	private static void modify(BufferedImage img, int[] rgbints, byte[] data){
		Graphics2D g = img.createGraphics();
		RGB brightest = RGB.getColor(0);
        Coordinates coordinates = new Coordinates();
		
		for(int y = 0; y < height; ++y){
            for(int x = 0; x < width; ++x){
                int idx = y * width + x;
                int current = rgbints[idx];
                                
                RGB clr = RGB.getColor(current);
                
                if(!brightest.brighterThan(clr)){
                	brightest = clr;
                    coordinates.setAll(x, y, idx);
                }
            }
        }
		
		// red is own
		g.setColor(new Color(255, 0, 0));
		int widthRect = Main.widthRect;
		int sizeHalf = widthRect/2;
		g.drawRect(coordinates.x - sizeHalf, coordinates.y - sizeHalf, widthRect, heightRect);
		System.out.println("Brightest own pixel: x=" + coordinates.x + ", y=" + coordinates.y);
		System.out.println("Brightest own pixel: r=" + brightest.r + ", g=" + brightest.g + ", b=" + brightest.b);
		
		// green is second alorithm
		coordinates = findBrightestPixel(data, width, height);
		//brightest = coordinates.rgb;
		g.setColor(new Color(119, 226, 242));
		widthRect = Main.widthRect + 10;
		int heightRect = Main.heightRect +10;
		sizeHalf = widthRect/2;
		g.drawRect(coordinates.x - sizeHalf, coordinates.y - sizeHalf, widthRect, heightRect);
		System.out.println("Brightest first alg. pixel: x=" + coordinates.x + ", y=" + coordinates.y);
		//System.out.println("Brightest first alg. pixel: r=" + brightest.r + ", g=" + brightest.g + ", b=" + brightest.b);

		/*
		// green is second alorithm
		coordinates = Main.brightest;
		brightest = coordinates.rgb;
		g.setColor(new Color(119, 226, 242));
		widthRect = Main.widthRect + 10;
		sizeHalf = widthRect/2;
		g.drawRect(coordinates.x - sizeHalf, coordinates.y - sizeHalf, widthRect, heightRect);
		System.out.println("Brightest first alg. pixel: x=" + coordinates.x + ", y=" + coordinates.y);
		System.out.println("Brightest first alg. pixel: r=" + brightest.r + ", g=" + brightest.g + ", b=" + brightest.b);

		// yellow is second alorithm
		coordinates = Main.brightest2;
		brightest = coordinates.rgb;
		g.setColor(new Color(226, 246, 46));
		widthRect = Main.widthRect - 10;
		sizeHalf = widthRect/2;
		g.drawRect(coordinates.x - sizeHalf, coordinates.y - sizeHalf, widthRect, heightRect);
		System.out.println("Brightest second alg. pixel: x=" + coordinates.x + ", y=" + coordinates.y);
		System.out.println("Brightest second alg. pixel: r=" + brightest.r + ", g=" + brightest.g + ", b=" + brightest.b);
		/**/
		
	}
	
	public static class Coordinates{
        public int x = 0;
        public int y = 0;
        public int idx = 0;
        public RGB rgb = new RGB();

        public Coordinates(){
        }

        public Coordinates(int x, int y, int idx){
            setAll(x, y, idx);
        }

        public void setAll(int x, int y, int idx){
            this.x = x;
            this.y = y;
            this.idx = idx;
        }
    }
	
	private static class RGB {
		public int r, g, b; 
		
		public static RGB getColor(int clr){
			RGB rgb = new RGB();
			rgb.r =  clr & 0x000000ff;
			rgb.g = (clr & 0x0000ff00) >> 8;
			rgb.b = (clr & 0x00ff0000) >> 16;
			return rgb;
		}
		
		public boolean brighterThan(RGB other){
			int thiss = r + g + b;
			int otherr = other.r + other.g + other.b;
			boolean res = thiss > otherr;
			return res;
		}
	}
	
	public static Coordinates findBrightestPixel(byte[] data, int width, int height){
        int brightest = 0;
        Coordinates coordinates = new Coordinates();

        for(int y = 0; y < height; ++y){
            for(int x = 0; x < width; ++x){
                int idx = y * width + x;
                int current = data[idx];
                if(current < 0){
                    current += 256;
                }
                if(current > brightest){
                    brightest = current;
                    coordinates.setAll(x, y, idx);
                }
            }
        }

        return coordinates;
	}
	
	private static byte[] readSmallBinaryFile(String aFileName) throws IOException {
	    Path path = Paths.get(aFileName);
	    return Files.readAllBytes(path);
	}

	private static Coordinates brightest = new Coordinates();

    /**
     * Decodes YUV frame to a buffer which can be use to create a bitmap. use
     * this for OS < FROYO which has a native YUV decoder decode Y, U, and V
     * values on the YUV 420 buffer described as YCbCr_422_SP by Android
     *
     * @param out
     *            the outgoing array of RGB bytes
     * @param fg
     *            the incoming frame bytes
     * @param width
     *            of source frame
     * @param height
     *            of source frame
     * @throws NullPointerException
     * @throws IllegalArgumentException
     */
    public static void decodeYUV(int[] out, byte[] fg, int width, int height) throws NullPointerException, IllegalArgumentException {
        int sz = width * height;
        if (out == null)
            throw new NullPointerException("buffer out is null");
        if (out.length < sz)
            throw new IllegalArgumentException("buffer out size " + out.length + " < minimum " + sz);
        if (fg == null)
            throw new NullPointerException("buffer 'fg' is null");
        if (fg.length < sz)
            throw new IllegalArgumentException("buffer fg size " + fg.length + " < minimum " + sz * 3 / 2);
        int i, j;
        int Y, Cr = 0, Cb = 0;
        for (j = 0; j < height; j++) {
            int pixPtr = j * width;
            final int jDiv2 = j >> 1;
            for (i = 0; i < width; i++) {
                Y = fg[pixPtr];
                if (Y < 0)
                    Y += 255;
                if ((i & 0x1) != 1) {
                    final int cOff = sz + jDiv2 * width + (i >> 1) * 2;
                    Cb = fg[cOff];
                    if (Cb < 0)
                        Cb += 127;
                    else
                        Cb -= 128;
                    Cr = fg[cOff + 1];
                    if (Cr < 0)
                        Cr += 127;
                    else
                        Cr -= 128;
                }
                int R = Y + Cr + (Cr >> 2) + (Cr >> 3) + (Cr >> 5);
                if (R < 0)
                    R = 0;
                else if (R > 255)
                    R = 255;
                int G = Y - (Cb >> 2) + (Cb >> 4) + (Cb >> 5) - (Cr >> 1) + (Cr >> 3) + (Cr >> 4) + (Cr >> 5);
                if (G < 0)
                    G = 0;
                else if (G > 255)
                    G = 255;
                int B = Y + Cb + (Cb >> 1) + (Cb >> 2) + (Cb >> 6);
                if (B < 0)
                    B = 0;
                else if (B > 255)
                    B = 255;
                

                
                RGB rgb = new RGB();
                rgb.r = R;
                rgb.g = G;
                rgb.b = B;
                
                if(rgb.brighterThan(brightest.rgb)){
                	brightest.rgb = rgb;
                	brightest.x = i;
                	brightest.y = j;
                }
                
                
                out[pixPtr++] = 0xff000000 + (B << 16) + (G << 8) + R;
            }
        }

    }

	
	private static Coordinates brightest2 = new Coordinates();
	
    public static void YUV_NV21_TO_RGB(int[] argb, byte[] yuv, int width, int height) {
        final int frameSize = width * height;

        final int ii = 0;
        final int ij = 0;
        final int di = +1;
        final int dj = +1;

        int a = 0;
        for (int i = 0, ci = ii; i < height; ++i, ci += di) {
            for (int j = 0, cj = ij; j < width; ++j, cj += dj) {
                int y = (0xff & ((int) yuv[ci * width + cj]));
                int v = (0xff & ((int) yuv[frameSize + (ci >> 1) * width + (cj & ~1) + 0]));
                int u = (0xff & ((int) yuv[frameSize + (ci >> 1) * width + (cj & ~1) + 1]));
                y = y < 16 ? 16 : y;

                int r = (int) (1.164f * (y - 16) + 1.596f * (v - 128));
                int g = (int) (1.164f * (y - 16) - 0.813f * (v - 128) - 0.391f * (u - 128));
                int b = (int) (1.164f * (y - 16) + 2.018f * (u - 128));

                r = r < 0 ? 0 : (r > 255 ? 255 : r);
                g = g < 0 ? 0 : (g > 255 ? 255 : g);
                b = b < 0 ? 0 : (b > 255 ? 255 : b);
                
                RGB rgb = new RGB();
                rgb.r = r;
                rgb.g = g;
                rgb.b = b;
                
                if(rgb.brighterThan(brightest2.rgb)){
                	brightest2.rgb = rgb;
                	brightest2.x = cj;
                	brightest2.y = ci;
                }

                argb[a++] = 0xff000000 | (r << 16) | (g << 8) | b;
            }
        }
    }

}
